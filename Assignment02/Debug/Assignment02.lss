
Assignment02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1f  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d7d  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050d  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005db  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  00002b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	4d d0       	rcall	.+154    	; 0x18c <main>
  f2:	81 c0       	rjmp	.+258    	; 0x1f6 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <init_keyboard>:
 */ 

#include <avr/io.h>

void init_keyboard()
{
  f6:	08 95       	ret

000000f8 <getCh>:


int8_t getCh()
{
	uint8_t row = 0, col = 0;
	DDRJ = 0xF0;
  f8:	80 ef       	ldi	r24, 0xF0	; 240
  fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ = 0x0F;
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	
	for(int i=0; i<4; i++)
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0



int8_t getCh()
{
	uint8_t row = 0, col = 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
	PORTJ = 0x0F;
	
	for(int i=0; i<4; i++)
	{
		//Determine which column pin is pulled LOW with a bitwise mask
		if(!(PINJ & (0b00001000>>i)))
 10a:	a3 e0       	ldi	r26, 0x03	; 3
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	e8 e0       	ldi	r30, 0x08	; 8
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	2c 91       	ld	r18, X
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	bf 01       	movw	r22, r30
 118:	04 2e       	mov	r0, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <getCh+0x28>
 11c:	75 95       	asr	r23
 11e:	67 95       	ror	r22
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <getCh+0x24>
 124:	26 23       	and	r18, r22
 126:	37 23       	and	r19, r23
 128:	23 2b       	or	r18, r19
 12a:	09 f4       	brne	.+2      	; 0x12e <getCh+0x36>
		{
			col = i;
 12c:	84 2f       	mov	r24, r20
{
	uint8_t row = 0, col = 0;
	DDRJ = 0xF0;
	PORTJ = 0x0F;
	
	for(int i=0; i<4; i++)
 12e:	4f 5f       	subi	r20, 0xFF	; 255
 130:	5f 4f       	sbci	r21, 0xFF	; 255
 132:	44 30       	cpi	r20, 0x04	; 4
 134:	51 05       	cpc	r21, r1
 136:	69 f7       	brne	.-38     	; 0x112 <getCh+0x1a>
			row = i;
		}
	}
*/
	return col;
 138:	08 95       	ret

0000013a <init_leds>:
#include <avr/io.h>

void init_leds()
{
	//set port H as output
	DDRH = 0xFF;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
 140:	08 95       	ret

00000142 <set_led>:
}

// led_no [1..8], state [0..1]
void set_led(uint8_t led_no, uint8_t state)
{
	if (state)
 142:	66 23       	and	r22, r22
 144:	89 f0       	breq	.+34     	; 0x168 <set_led+0x26>
	//set bit
	//led_no is subtracted from 8 so that it corresponds to the board's order (i.e. the 7th bit is actually LED1)
	PORTH |= 1<<(8-led_no);
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	40 81       	ld	r20, Z
 14c:	28 e0       	ldi	r18, 0x08	; 8
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	28 1b       	sub	r18, r24
 152:	31 09       	sbc	r19, r1
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <set_led+0x1c>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	2a 95       	dec	r18
 160:	e2 f7       	brpl	.-8      	; 0x15a <set_led+0x18>
 162:	84 2b       	or	r24, r20
 164:	80 83       	st	Z, r24
 166:	08 95       	ret
	else
	//clear bit
	PORTH &= ~(1<<(8-led_no));
 168:	e2 e0       	ldi	r30, 0x02	; 2
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	20 81       	ld	r18, Z
 16e:	48 e0       	ldi	r20, 0x08	; 8
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	48 1b       	sub	r20, r24
 174:	51 09       	sbc	r21, r1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <set_led+0x3e>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	e2 f7       	brpl	.-8      	; 0x17c <set_led+0x3a>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <main>:
#include "util/delay.h"
#include "led_driver.h"
#include "keypad4x4_driver.h"

int main(void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	int8_t volatile key;
	
	init_keyboard();
 196:	af df       	rcall	.-162    	; 0xf6 <init_keyboard>
	init_leds();
 198:	d0 df       	rcall	.-96     	; 0x13a <init_leds>

	while (1)
	{
		//store pressed key
		key = getCh();
 19a:	ae df       	rcall	.-164    	; 0xf8 <getCh>
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	68 94       	set
 1a0:	ff 24       	eor	r15, r15
 1a2:	f3 f8       	bld	r15, 3
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
		
		//set LED i according to bit (i-8)
		for (int i=8; i>0; i--)
		{
			//check if bits 0-3 are set
			if (key & 1<<abs(i-8))
 1aa:	08 2e       	mov	r0, r24
 1ac:	00 0c       	add	r0, r0
 1ae:	99 0b       	sbc	r25, r25
 1b0:	98 01       	movw	r18, r16
 1b2:	11 23       	and	r17, r17
 1b4:	24 f4       	brge	.+8      	; 0x1be <main+0x32>
 1b6:	22 27       	eor	r18, r18
 1b8:	33 27       	eor	r19, r19
 1ba:	20 1b       	sub	r18, r16
 1bc:	31 0b       	sbc	r19, r17
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0x38>
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	2a 95       	dec	r18
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <main+0x34>
 1c8:	80 ff       	sbrs	r24, 0
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <main+0x48>
				set_led(i, 1);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	8f 2d       	mov	r24, r15
 1d0:	b8 df       	rcall	.-144    	; 0x142 <set_led>
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <main+0x4e>
			else
				set_led(i, 0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	8f 2d       	mov	r24, r15
 1d8:	b4 df       	rcall	.-152    	; 0x142 <set_led>
 1da:	01 50       	subi	r16, 0x01	; 1
 1dc:	11 09       	sbc	r17, r1
 1de:	fa 94       	dec	r15
 1e0:	08 3f       	cpi	r16, 0xF8	; 248
	{
		//store pressed key
		key = getCh();
		
		//set LED i according to bit (i-8)
		for (int i=8; i>0; i--)
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	18 07       	cpc	r17, r24
 1e6:	01 f7       	brne	.-64     	; 0x1a8 <main+0x1c>
 1e8:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	99 e0       	ldi	r25, 0x09	; 9
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x60>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x66>
 1f2:	00 00       	nop
 1f4:	d2 cf       	rjmp	.-92     	; 0x19a <main+0xe>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
